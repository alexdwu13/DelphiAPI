version: '3.5'

services:
  # sqs:
  #   build:
  #     context: ./local_queue
  #   volumes:
  #     - ./local_queue/elasticmq.conf:/elasticmq.conf
  #   ports:
  #     - 9324:9324

  rabbitmq:
    image: rabbitmq:3.6.15
    ports:
      - "15672:15672"
      - "5672:5672"
    labels:
      NAME: "rabbitmq"
    env_file:
      - variables.env
    volumes:
      - "./local_queue/enabled_plugins:/etc/rabbitmq/enabled_plugins"
    networks:
      - delphi

  db:
    image: postgres
    env_file:
      - variables.env
    # volumes:
    #   - psql_bounties:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - delphi

  redis:
    image: "redis"
    # volumes:
    #   - redis_bounties:/data
    ports:
      - "6379:6379"
    networks:
      - delphi

  delphi_api:
    build:
      context: ./delphi_api
      dockerfile: Dockerfile
    restart: always
    env_file:
      - variables.env
    volumes:
      - ./delphi_api:/usr/src/app
    ports:
      - "5000:5000"
    networks:
      - delphi
    depends_on:
      - db
      - redis
  delphi_subscriber:
    build:
      context: ./delphi_api
      dockerfile: Dockerfile
    restart: always
    env_file:
      - variables.env
    command: bash -c "PYTHONPATH=/usr/src/app && sleep 15 && python3 app/event_processor/main.py"
    volumes:
      - ./delphi_api:/usr/src/app
    depends_on:
      - rabbitmq
    networks:
      - delphi
  # sql_jobs:
  #   # In production, these run an as an hourly cronjob.
  #   # Here, we use a local.sh to just run it more often
  #   build:
  #     context: ./sql_jobs
  #     dockerfile: Dockerfile
  #   command: bash -c "./local.sh"
  #   env_file:
  #     - variables.env
  #   volumes:
  #     - ./sql_jobs:/usr/src/app
  # track_bounty_expirations:
  #   # TODO - just make this a cronjob. It does not need to be a long-running job
  #   build:
  #     context: ./bounties_api
  #     dockerfile: Dockerfile
  #   restart: always
  #   env_file:
  #     - variables.env
  #   command: python3 manage.py track_bounty_expirations
  #   volumes:
  #     - ./bounties_api:/code
  #   depends_on:
  #     - db
  #     - bounties_api
  # get_token_values:
  #   # In production, these run an as an every 5 minute cronjob.
  #   # Here, we use a local.sh to just put it in a bash loop
  #   build:
  #     context: ./bounties_api
  #     dockerfile: Dockerfile
  #   restart: always
  #   env_file:
  #     - variables.env
  #   command: bash -c "./local.sh"
  #   volumes:
  #     - ./bounties_api:/code
  #   depends_on:
  #     - db
  #     - bounties_api
  contract_subscriber:
    build:
      context: ./contract_subscriber
    restart: always
    env_file:
      - variables.env
    # command: npm run contract
    volumes:
      - ./contract_subscriber:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - delphi
    stdin_open: true
    tty: true
    depends_on:
      - rabbitmq
      - redis

  factory_subscriber:
    build:
      context: ./contract_subscriber
    restart: always
    env_file:
      - variables.env
    # command: npm run factory
    volumes:
      - ./contract_subscriber:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - delphi
    stdin_open: true
    tty: true
    depends_on:
      - rabbitmq
      - redis

  # mock_contract_subscriber:
  #   build:
  #     context: ./mock_contract_subscriber
  #   restart: always
  #   env_file:
  #     - variables.env
  #   #command: npm start
  #   volumes:
  #     - ./mock_contract_subscriber:/usr/src/app
  #     - /usr/src/app/node_modules
  #   depends_on:
  #     - rabbitmq
  #   stdin_open: true
  #   tty: true
  #   networks:
  #     - delphi
# volumes:
#   psql_bounties:
#     external: true
#   redis_bounties:
#     external: true
networks:
  delphi:
    name: delphi
